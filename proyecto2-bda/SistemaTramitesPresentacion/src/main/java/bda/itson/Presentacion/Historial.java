/*
*Clase creade el 10 de abril de 2024
* Esta clase es la representacion grafica en la capa del usuario para interactuar con el sistema y ver su historial de tramites
 */
package bda.itson.Presentacion;

import dtos.PersonaDTO;
import interfaces.IConsultas;
import java.time.LocalDate;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;
import negocio.Consultas;
import tablas.Conversiones;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import dtos.LicenciaDTO;
import dtos.PlacaDTO;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableModel;

/**
 *
 * @author abelc
 */
public class Historial extends javax.swing.JFrame {

    PersonaDTO personaDTO;
    IConsultas consultas;
    Conversiones tabla;

    /**
     * Creates new form Historial
     *
     * @param persona persona de la que se hara el historial
     */
    public Historial(PersonaDTO persona) {
        this.personaDTO = persona;
        this.consultas = new Consultas();
        this.tabla = new Conversiones();
        initComponents();
        jLabel2.setText("Historial de " + persona.getNombres() + " " + persona.getApellidoPaterno() + " " + persona.getApellidoMaterno());
        crearTablaHistorial();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        datePicker2 = new com.github.lgooddatepicker.components.DatePicker();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        tramiteComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        buscarBtn = new javax.swing.JButton();
        generarReporteBtn = new javax.swing.JButton();
        regresarBtn1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        historialTabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(232, 232, 232));

        jPanel3.setBackground(new java.awt.Color(107, 27, 56));
        jPanel3.setPreferredSize(new java.awt.Dimension(482, 55));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/descarga (1).png"))); // NOI18N

        jLabel2.setText("Historial de tr√°mites de");
        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 508, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(112, 112, 112)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(23, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(15, 15, 15)
                    .addComponent(jLabel2)
                    .addContainerGap(15, Short.MAX_VALUE)))
        );

        datePicker2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        datePicker2.setName(""); // NOI18N

        tramiteComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Licencias", "Placas" }));
        tramiteComboBox.setBackground(new java.awt.Color(255, 255, 255));
        tramiteComboBox.setForeground(new java.awt.Color(0, 0, 0));

        jLabel3.setText("Desde:");
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));

        jLabel4.setText("Hasta:");
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));

        buscarBtn.setText("Buscar");
        buscarBtn.setBackground(new java.awt.Color(107, 27, 56));
        buscarBtn.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        buscarBtn.setForeground(new java.awt.Color(255, 255, 255));
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        generarReporteBtn.setText("Generar reporte");
        generarReporteBtn.setBackground(new java.awt.Color(107, 27, 56));
        generarReporteBtn.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        generarReporteBtn.setForeground(new java.awt.Color(255, 255, 255));
        generarReporteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarReporteBtnActionPerformed(evt);
            }
        });

        regresarBtn1.setText("Regresar");
        regresarBtn1.setBackground(new java.awt.Color(107, 27, 56));
        regresarBtn1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        regresarBtn1.setForeground(new java.awt.Color(255, 255, 255));
        regresarBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarBtn1ActionPerformed(evt);
            }
        });

        historialTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        historialTabla.setSelectionForeground(new java.awt.Color(255, 255, 255));
        historialTabla.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        historialTabla.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(historialTabla);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tramiteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(regresarBtn1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(generarReporteBtn)
                                .addGap(29, 29, 29))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 73, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(76, 76, 76))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(buscarBtn)
                                .addGap(267, 267, 267))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tramiteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(buscarBtn)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 80, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(regresarBtn1)
                            .addComponent(generarReporteBtn))
                        .addGap(25, 25, 25))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo para generar el reporte integrando la biblioteca IText
     *
     * @param evt
     */
    private void generarReporteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarReporteBtnActionPerformed
        if(isTableEmpty(historialTabla)){
            JOptionPane.showMessageDialog(null, "No hay datos encontrados");
            return;
        } 
        LocalDate fecha1 = datePicker1.getDate(); // Obtener la fecha del primer datePicker
        LocalDate fecha2 = datePicker2.getDate();

        Document documento = new Document();
        List<LicenciaDTO> licencias;
        List<PlacaDTO> placas;

        try {
            String ruta = System.getProperty("user.home");

            // CAMBIAR A CUALQUIER RUTA
            String rutaAbs = "/Documents/Reporte.pdf";
            PdfWriter.getInstance(documento, new FileOutputStream(ruta + rutaAbs));
            documento.open();
            PdfPTable tablaPdf;
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            if (tramiteComboBox.getSelectedItem().equals("Licencias")) {

                Paragraph titulo = new Paragraph("Reporte de Licencias de " + personaDTO.getNombres() + " " + personaDTO.getApellidoPaterno() + " " + personaDTO.getApellidoMaterno(), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18));
                titulo.setAlignment(Element.ALIGN_CENTER);
                documento.add(titulo);
                tablaPdf = new PdfPTable(4);
                tablaPdf.addCell("Costo");
                tablaPdf.addCell("Fecha de Expedicion");
                tablaPdf.addCell("Fecha de Vencimiento");
                tablaPdf.addCell("Estado");
//                tablaPdf.addCell("Vigencia");

                if (fecha1 != null && fecha2 != null) {
                    Calendar desde = Calendar.getInstance();
                    desde.clear();
                    desde.set(fecha1.getYear(), fecha1.getMonthValue() - 1, fecha1.getDayOfMonth());
                    Calendar hasta = Calendar.getInstance();
                    hasta.clear();
                    hasta.set(fecha2.getYear(), fecha2.getMonthValue() - 1, fecha2.getDayOfMonth());

                    licencias = consultas.obtenerLicenciasPorPeriodo(personaDTO, desde, hasta);
                } else {
                    licencias = consultas.obtenerLicenciasPorPersona(personaDTO);

                }
                for (LicenciaDTO licencia : licencias) {
                    String estado = licencia.getEstadoActual() == LicenciaDTO.estadoDTO.EXPIRADA ? "Expirada" : "No expirada";
                    // OPCIONAL REEMPLAZAR POR LOCALDATE ENVEZ DE DATE
                    tablaPdf.addCell("$" + licencia.getCosto());
                    tablaPdf.addCell("Dia " + licencia.getFechaExpedicion().getTime().getDate() + " del mes " + (licencia.getFechaExpedicion().getTime().getMonth() + 1) + " de " + (licencia.getFechaExpedicion().getTime().getYear() + 1900));
                    tablaPdf.addCell("Dia " + licencia.getFechaVencimiento().getTime().getDate() + " del mes " + (licencia.getFechaVencimiento().getTime().getMonth() + 1) + " de " + (licencia.getFechaVencimiento().getTime().getYear() + 1900));
                    tablaPdf.addCell(estado);
//                    tablaPdf.addCell(licencia.getVigencia() + " A√±os");
                }

                documento.add(tablaPdf);
                documento.close();

            } else if (tramiteComboBox.getSelectedItem().equals("Placas")) {
                Paragraph titulo = new Paragraph("Reporte de placas de " + personaDTO.getNombres() + " " + personaDTO.getApellidoPaterno() + " " + personaDTO.getApellidoMaterno(), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18));
                titulo.setAlignment(Element.ALIGN_CENTER);
                documento.add(titulo);
                tablaPdf = new PdfPTable(5);
                tablaPdf.addCell("Codigo");
                tablaPdf.addCell("Costo");
                tablaPdf.addCell("Fecha de Recepcion");
                tablaPdf.addCell("Fecha de Expedicion");
                tablaPdf.addCell("Estado");

                if (fecha1 != null && fecha2 != null) {
                    Calendar desde = Calendar.getInstance();
                    desde.clear();
                    desde.set(fecha1.getYear(), fecha1.getMonthValue() - 1, fecha1.getDayOfMonth());
                    Calendar hasta = Calendar.getInstance();
                    hasta.clear();
                    hasta.set(fecha2.getYear(), fecha2.getMonthValue() - 1, fecha2.getDayOfMonth());

                    placas = consultas.obtenerPlacasPorPeriodo(personaDTO, desde, hasta);
                } else {
                    placas = consultas.obtenerPlacasPorPersona(personaDTO);

                }

                for (PlacaDTO placa : placas) {

                    tablaPdf.addCell(placa.getCodigo());
                    tablaPdf.addCell(String.valueOf(placa.getCosto()));
                    tablaPdf.addCell(placa.getFechaRecepcion() != null ? dateFormat.format(placa.getFechaRecepcion().getTime()) : "Placa vigente");
                    tablaPdf.addCell("Dia " + placa.getFechaExpedicion().getTime().getDate() + " del mes " + (placa.getFechaExpedicion().getTime().getMonth() + 1) + " de " + (placa.getFechaExpedicion().getTime().getYear() + 1900));
                    tablaPdf.addCell(placa.getEstado());

                }

                documento.add(tablaPdf);
                documento.close();

            } else if (tramiteComboBox.getSelectedItem().equals("Todos")) {
                Paragraph titulo = new Paragraph("Reporte de licencias y placas de " + personaDTO.getNombres() + " " + personaDTO.getApellidoPaterno() + " " + personaDTO.getApellidoMaterno(), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18));
                titulo.setAlignment(Element.ALIGN_CENTER);
                documento.add(titulo);
                tablaPdf = new PdfPTable(5);
                tablaPdf.addCell("Tramite");
                tablaPdf.addCell("Costo");
                tablaPdf.addCell("Fecha de Expedicion");
                tablaPdf.addCell("Fecha de Vencimiento");
                tablaPdf.addCell("Estado");

                if (fecha1 != null && fecha2 != null) {
                    Calendar desde = Calendar.getInstance();
                    desde.clear();
                    desde.set(fecha1.getYear(), fecha1.getMonthValue() - 1, fecha1.getDayOfMonth());
                    Calendar hasta = Calendar.getInstance();
                    hasta.clear();
                    hasta.set(fecha2.getYear(), fecha2.getMonthValue() - 1, fecha2.getDayOfMonth());
                    placas = consultas.obtenerPlacasPorPeriodo(personaDTO, desde, hasta);
                    licencias = consultas.obtenerLicenciasPorPeriodo(personaDTO, desde, hasta);
                } else {
                    licencias = consultas.obtenerLicenciasPorPersona(personaDTO);
                    placas = consultas.obtenerPlacasPorPersona(personaDTO);

                }

                for (LicenciaDTO licencia : licencias) {
                    String estado = licencia.getEstadoActual() == LicenciaDTO.estadoDTO.EXPIRADA ? "Expirada" : "No expirada";
                    tablaPdf.addCell("Licencia");
                    tablaPdf.addCell("$" + licencia.getCosto());
                    tablaPdf.addCell(dateFormat.format(licencia.getFechaExpedicion().getTime()));
                    tablaPdf.addCell(licencia.getFechaVencimiento() != null ? dateFormat.format(licencia.getFechaVencimiento().getTime()) : "Licencia vigente");
                    tablaPdf.addCell(estado);

                }
                for (PlacaDTO placa : placas) {
                    tablaPdf.addCell("Placa");
                    tablaPdf.addCell("$" + placa.getCosto());
                    tablaPdf.addCell(dateFormat.format(placa.getFechaExpedicion().getTime()));
                    tablaPdf.addCell(placa.getFechaRecepcion() != null ? dateFormat.format(placa.getFechaRecepcion().getTime()) : "Placa vigente");
                    tablaPdf.addCell(placa.getEstado());

                }
                documento.add(new Paragraph("\n"));
                documento.add(tablaPdf);
                documento.close();
            }

            JOptionPane.showMessageDialog(null, "Reporte Creado en: " + ruta + rutaAbs);

        } catch (DocumentException e) {

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Historial.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_generarReporteBtnActionPerformed

    /**
     * Metodo para regresar al menu principal
     *
     * @param evt
     */
    private void regresarBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarBtn1ActionPerformed
        BuscarPersona buscarPersonas = new BuscarPersona(3);
        buscarPersonas.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_regresarBtn1ActionPerformed

    /**
     * Metodo para ejecutar la busqueda. Se toman los datos introducidos por el
     * usuario y se realiza la busqueda en la base de datos
     *
     * @param evt
     */
    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        LocalDate fecha1 = datePicker1.getDate(); // Obtener la fecha del primer datePicker
        LocalDate fecha2 = datePicker2.getDate();
        if (tramiteComboBox.getSelectedItem() == "Todos") {
            crearTablaHistorial();
        }
        if (tramiteComboBox.getSelectedItem() == "Licencias") {
            DefaultTableModel model = (DefaultTableModel) historialTabla.getModel();
            model.setRowCount(0);
            DefaultTableModel newModel = tabla.licenciasTableModel(consultas.obtenerLicenciasPorPersona(personaDTO));
            historialTabla.setModel(newModel);
        }
        if (tramiteComboBox.getSelectedItem() == "Placas") {
            DefaultTableModel model = (DefaultTableModel) historialTabla.getModel();
            model.setRowCount(0);
            DefaultTableModel newModel = tabla.placasTableModel(consultas.obtenerPlacasPorPersona(personaDTO));
            historialTabla.setModel(newModel);
        }
        if (tramiteComboBox.getSelectedItem() == "Todos" && fecha1 != null && fecha2 != null) {
            Calendar desde = Calendar.getInstance();
            desde.clear();
            desde.set(fecha1.getYear(), fecha1.getMonthValue() - 1, fecha1.getDayOfMonth());
            Calendar hasta = Calendar.getInstance();
            hasta.clear();
            hasta.set(fecha2.getYear(), fecha2.getMonthValue() - 1, fecha2.getDayOfMonth());
            DefaultTableModel model = (DefaultTableModel) historialTabla.getModel();
            model.setRowCount(0);
            DefaultTableModel newModel = tabla.tramitesTableModel(consultas.obtenerLicenciasPorPeriodo(personaDTO, desde, hasta), consultas.obtenerPlacasPorPeriodo(personaDTO, desde, hasta));
            historialTabla.setModel(newModel);
        }
        if (tramiteComboBox.getSelectedItem() == "Licencia" && fecha1 != null && fecha2 != null) {
            Calendar desde = Calendar.getInstance();
            desde.clear();
            desde.set(fecha1.getYear(), fecha1.getMonthValue() - 1, fecha1.getDayOfMonth());
            Calendar hasta = Calendar.getInstance();
            hasta.clear();
            hasta.set(fecha2.getYear(), fecha2.getMonthValue() - 1, fecha2.getDayOfMonth());
            DefaultTableModel model = (DefaultTableModel) historialTabla.getModel();
            model.setRowCount(0);
            DefaultTableModel newModel = tabla.licenciasTableModel(consultas.obtenerLicenciasPorPeriodo(personaDTO, desde, hasta));
            historialTabla.setModel(newModel);
        }
        if (tramiteComboBox.getSelectedItem() == "Placas" && fecha1 != null && fecha2 != null) {
            Calendar desde = Calendar.getInstance();
            desde.clear();
            desde.set(fecha1.getYear(), fecha1.getMonthValue() - 1, fecha1.getDayOfMonth());
            Calendar hasta = Calendar.getInstance();
            hasta.clear();
            hasta.set(fecha2.getYear(), fecha2.getMonthValue() - 1, fecha2.getDayOfMonth());
            DefaultTableModel model = (DefaultTableModel) historialTabla.getModel();
            model.setRowCount(0);
            DefaultTableModel newModel = tabla.placasTableModel(consultas.obtenerPlacasPorPeriodo(personaDTO, desde, hasta));
            historialTabla.setModel(newModel);
        }

    }//GEN-LAST:event_buscarBtnActionPerformed
    private void crearTablaHistorial() {
        DefaultTableModel model = (DefaultTableModel) historialTabla.getModel();
        model.setRowCount(0);
        DefaultTableModel newModel = tabla.tramitesTableModel(consultas.obtenerLicenciasPorPersona(personaDTO), consultas.obtenerPlacasPorPersona(personaDTO));
        historialTabla.setModel(newModel);
    }
    
     public  boolean isTableEmpty(JTable table) {
        TableModel model = table.getModel();
        if (model.getRowCount() == 0) {
            return true;
        }
        for (int row = 0; row < model.getRowCount(); row++) {
            for (int column = 0; column < model.getColumnCount(); column++) {
                Object value = model.getValueAt(row, column);
                if (value != null && !value.toString().isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarBtn;
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private com.github.lgooddatepicker.components.DatePicker datePicker2;
    private javax.swing.JButton generarReporteBtn;
    private javax.swing.JTable historialTabla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton regresarBtn1;
    private javax.swing.JComboBox<String> tramiteComboBox;
    // End of variables declaration//GEN-END:variables
}
